# This workflow automates the process of releasing a new version of the project. 
# It allows for manual triggering and includes steps for checking out code, 
# setting up a Node.js environment, caching dependencies, installing necessary packages, 
# running the release-it tool for versioning and publishing, 
# and providing success or failure notifications based on the outcome of the release process.

name: Release Automation

on:
  workflow_dispatch:  # Enables manual triggering of the workflow

jobs:
  release:  # Job for the release process
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Fetch the latest code from the repository
        
      - name: Set up Node.js
        uses: actions/setup-node@v3  # Configure the Node.js environment
        with:
          node-version: '18'  # Specify the Node.js version

      - name: Cache Node.js modules  # Cache dependencies for faster builds
        uses: actions/cache@v3  # Action for caching files
        with:
          path: ~/.npm  # Path to cached Node.js modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}  # Unique cache key
          restore-keys: |  # Fallback keys for cache restoration
            ${{ runner.os }}-npm-  # Restore based on OS

      - name: Set Git user identity  # Set the Git user identity for committing
        run: |
          git config --global user.email "biplav413@gmail.com"  # Set your email
          git config --global user.name "Biplav-05"  # Set your name

      - name: Install dependencies
        run: npm ci  # Clean installation of dependencies based on package-lock.json

      - name: Run release-it
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}  # Token for GitHub API
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}  # Token for npm registry
        run: npx release-it  # Execute release-it for versioning and publishing

      - name: Notify Success
        if: success()  # Notify only if the previous steps succeeded
        run: echo "Release successful!"

      - name: Notify Failure
        if: failure()  # Notify only if any previous step failed
        run: echo "Release failed!"
